#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('web:server');
var http = require('http');
var configServer = require('../config/server');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || configServer.http_port);
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);
/**
 * Setup Socket.Io instance
 */
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  // debug('Listening on ' + bind);
  console.log('HTTP server is up and running in port ' + bind);
}


// /*---------------------MQTT AREA---------------------------*/
var mosca = require('mosca');
var configDatabase = require('../config/database');
var moscaBroker = new mosca.Server( {
    port : normalizePort(configServer.mqtt_port),
    persistence: {
        factory: mosca.persistence.Mongo,
        url: configDatabase.base_url
    }
} );

var MQttApp = require('../app_mqtt');
var mqtt = new MQttApp(moscaBroker, io);

// log when mosca broker running.
moscaBroker.on('ready', function () {
    console.log('MQTT broker is up and running in port '+configServer.mqtt_port);
});

// log client connected
moscaBroker.on('clientConnected', function(client) {
    // clientID = client.id;  // log a connected device
    console.log('MQTT: ClientConnected: ', client.id);
});

// log client connected
moscaBroker.on('clientDisconnected', function(client) {
    // clientID = client.id;  // log a disconnected device
    console.log('MQTT: ClientDisconnected: ', client.id);
});

// Forward mqtt data to socket
moscaBroker.on('published', (packet, client) => {
  mqtt.receivedDataCallBack(packet, client);
});